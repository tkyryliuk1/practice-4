class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self._size = 0

    def add_back(self, data):
        new_node = Node(data)
        if self.tail is None:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node
        self._size += 1

    def add_front(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = self.tail = new_node
        else:
            new_node.next = self.head
            self.head = new_node
        self._size += 1

    def size(self):
        return self._size

    def is_empty(self):
        return self._size == 0

    def remove_front(self):
        if self.head is None:
            return None
        data = self.head.data
        self.head = self.head.next
        if self.head is None:
            self.tail = None
        self._size -= 1
        return data

    def remove_back(self):
        if self.tail is None:
            return None
        if self.head == self.tail:
            data = self.head.data
            self.head = self.tail = None
        else:
            current = self.head
            while current.next != self.tail:
                current = current.next
            data = self.tail.data
            self.tail = current
            self.tail.next = None
        self._size -= 1
        return data

    def __str__(self):
        elements = []
        current = self.head
        while current:
            elements.append(str(current.data))
            current = current.next
        return " -> ".join(elements)

    def get_front_data(self):
        if self.head is None:
            return None
        return self.head.data

    def get_back_data(self):
        if self.tail is None:
            return None
        return self.tail.data

    def add_at_position(self, data, position):
        if position == 0:
            self.add_front(data)
        elif position == self._size:
            self.add_back(data)
        else:
            new_node = Node(data)
            current = self.head
            for x in range(position - 1):
                current = current.next
            new_node.next = current.next
            current.next = new_node
            self._size += 1

    def remove_at_position(self, position):
        if position == 0:
            return self.remove_front()
        elif position == self._size - 1:
            return self.remove_back()
        else:
            current = self.head
            for x in range(position - 1):
                current = current.next
            data = current.next.data
            current.next = current.next.next
            self._size -= 1
            return data
